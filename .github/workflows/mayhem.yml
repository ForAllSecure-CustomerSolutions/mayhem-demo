name: Mayhem CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - name: lowercase github.repository
      run: echo "REPO_NAME=`echo ${{github.repository}} | tr '[:upper:]' '[:lower:]'`" >>${GITHUB_ENV}
    
    # checkout repository
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Login to docker
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Install Docker Scout
      run: curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --

    - name: Install mdsbom
      run: curl -sSL https://app.mayhem.security/cli/mdsbom/linux/latest/mdsbom.deb -O && sudo dpkg -i mdsbom.deb && sudo usermod -aG mdsbom $USER 

    - name: Update /etc/docker/daemon.json to use mdsbom
      run: |
        echo '{
          "runtimes": {
            "mdsbom": {
              "path": "/usr/bin/mdsbom",
              "runtimeArgs": [
                "runc",
                "--",
                "runc"
              ]
            }
          },
          "default-runtime": "mdsbom"
        }' | sudo tee /etc/docker/daemon.json > /dev/null

    - name: Setup sync
      run: |
        echo '[sync]
        api_token = ${{ secrets.MAYHEM_TOKEN }}
        upstream_url = "https://app.mayhem.security/"
        workspace = "forallsecure-demo"
        ' | sudo tee -a /etc/mdsbom/config.toml
        cat /etc/mdsbom/config.toml
 
    - name: Restart services
      run: |
        sudo systemctl restart docker || sudo journalctl -xeu docker
        sudo systemctl restart mdsbom || sudo journalctl -xeu mdsbom

    - name: MDSBOM login
      run: mdsbom login https://app.mayhem.security ${{ secrets.MAYHEM_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push the app images
      run: |
        docker compose pull --ignore-buildable -q
        SHA=${{ github.sha }} docker compose build
        SHA=${{ github.sha }} docker compose push -q

    - name: Bring up the app
      run: SHA=${{ github.sha }} docker compose up -d --wait

    - name: Wait for the API to be up
      run: bash -c 'while ! curl -s http://localhost:8000/openapi.json; do sleep 1; done'

    - name: Start API analysis
      uses: forallsecure/mapi-action@v1
      continue-on-error: true
      with:
        mayhem-token: ${{ secrets.MAYHEM_TOKEN }}
        target: forallsecure-demo/mayhem-demo/api
        api-url: http://localhost:8000
        api-spec: http://localhost:8000/openapi.json
        sarif-report: api.sarif
        run-args: --experimental-rules

    # - name: Start ZAP API analysis
    #   uses: forallsecure/mapi-action@v1
    #   continue-on-error: true
    #   with:
    #     mayhem-token: ${{ secrets.MAYHEM_TOKEN }}
    #     target: forallsecure-demo/mayhem-demo/api-zap
    #     api-url: http://localhost:8000
    #     api-spec: http://localhost:8000/openapi.json
    #     sarif-report: api-zap.sarif
    #     run-args: --ignore-rule auth-bypass --ignore-rule command-injection --ignore-rule internal-server-error --ignore-rule invalid-request-spec --ignore-rule invalid-response-spec --ignore-rule timeout --ignore-rule verb-tampering --ignore-rule nosql-injection
    #     zap-api-scan: true

    - name: Start Code analysis
      uses: forallsecure/mcode-action@v1
      with:
        mayhem-token: ${{ secrets.MAYHEM_TOKEN }}
        owner: forallsecure-demo
        args: -f car/Mayhemfile --image ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/car:${{ github.sha }}
        sarif-output: code.sarif

    - name: Bring down the app
      run: SHA=${{ github.sha }} docker compose down

    - name: Run Dynamic SBOM scan
      run: | 
        sudo -u $USER mdsbom scout ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/car:${{ github.sha }} --sca-report-out dsbom-car.sarif --workspace forallsecure-demo
        sudo -u $USER mdsbom scout ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/api:${{ github.sha }} --sca-report-out dsbom-api.sarif --workspace forallsecure-demo
        sudo -u $USER mdsbom scout forallsecuredevbot/redis:latest --sca-report-out dsbom-redis.sarif --workspace forallsecure-demo

    - name: Patch docker scout SARIF report for CodeQL
      run : |
        jq 'walk(if type == "object" and has("startLine") and .startLine == 0 then .startLine = 1 else . end |
            if type == "object" and has("endLine") and .endLine == 0 then .endLine = 1 else . end |
            if type == "object" and has("endColumn") and .endColumn == 0 then .endColumn = 1 else . end |
            if type == "object" and has("startColumn") and .startColumn == 0 then .startColumn = 1 else . end)' dsbom-redis.sarif > dsbom-redis-patched.sarif

        jq 'walk(if type == "object" and has("startLine") and .startLine == 0 then .startLine = 1 else . end |
            if type == "object" and has("endLine") and .endLine == 0 then .endLine = 1 else . end |
            if type == "object" and has("endColumn") and .endColumn == 0 then .endColumn = 1 else . end |
            if type == "object" and has("startColumn") and .startColumn == 0 then .startColumn = 1 else . end)' dsbom-car.sarif > dsbom-car-patched.sarif
        
        jq 'walk(if type == "object" and has("startLine") and .startLine == 0 then .startLine = 1 else . end |
            if type == "object" and has("endLine") and .endLine == 0 then .endLine = 1 else . end |
            if type == "object" and has("endColumn") and .endColumn == 0 then .endColumn = 1 else . end |
            if type == "object" and has("startColumn") and .startColumn == 0 then .startColumn = 1 else . end)' dsbom-api.sarif > dsbom-api-patched.sarif

    - name: Upload SARIF file(s)
      id: upload-car
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: dsbom-car-patched.sarif

    - name: Upload SARIF file(s)
      id: upload-api
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: dsbom-api-patched.sarif

    - name: Upload SARIF file(s)
      id: upload-redis
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: dsbom-redis-patched.sarif

    - name: Dismiss issues that were not observed at runtime
      uses: advanced-security/dismiss-alerts@v1
      with:
        # specify a 'sarif-id' and 'sarif-file'
        sarif-id: ${{ steps.upload-redis.outputs.sarif-id }}
        sarif-file: dsbom-redis-patched.sarif
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Dismiss issues that were not observed at runtime
      uses: advanced-security/dismiss-alerts@v1
      with:
        # specify a 'sarif-id' and 'sarif-file'
        sarif-id: ${{ steps.upload-api.outputs.sarif-id }}
        sarif-file: dsbom-api-patched.sarif
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Dismiss issues that were not observed at runtime
      uses: advanced-security/dismiss-alerts@v1
      with:
        # specify a 'sarif-id' and 'sarif-file'
        sarif-id: ${{ steps.upload-car.outputs.sarif-id }}
        sarif-file: dsbom-car-patched.sarif
      env:
        GITHUB_TOKEN: ${{ github.token }}
